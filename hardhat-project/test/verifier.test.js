/**
 * @title verifier test suite
 * @author Anthony Spedaliere
 * @notice Tests for the Groth16Verifier contract implementation in verifier.sol
 */

// libraries
const { expect } = require("chai");
const { ethers, upgrades } = require("hardhat");

/**
 * @notice Test suite for the Groth16Verifier contract
 * @dev Tests deployment and proof verification functionality
 */
describe("Groth16Verifier", function () {
  let verifier;
  let owner;
  let a, b, c, publicInputs;

  /**
   * @notice Setup for each test
   * @dev Deploys a fresh contract instance and initializes proof data before each test
   */
  beforeEach(async function () {
    [owner] = await ethers.getSigners();
    const Verifier = await ethers.getContractFactory("Groth16Verifier");
    verifier = await Verifier.deploy();
    await verifier.waitForDeployment();

    // Set up the proof data (snarkjs generatecall)
    a = [
      "0x297e5d7a7f903d15e81e2be0af1d269e643c92d807682198594b031323077bd1",
      "0x06ea797c8fbbd32e99df61e09e616865f42b0816d6acf1d9f44544038b622b8a",
    ];

    b = [
      [
        "0x03c0ddadf43e837eee817ccd271f348b6df79daf022852b30bffae8937d66836",
        "0x171554644a519e04f4b25d250683ef0e54007172fa65dd2dc30973c89e1c310a",
      ],
      [
        "0x2a1c87099d6d172321c72831330d39d615e78b0e8e7ff3a54237b71617f18fe6",
        "0x26ceb46c67bd009abe08c6de0daba6831a68be0a8fb9eca1c14535a4e50960c5",
      ],
    ];

    c = [
      "0x0851be7a97a12b6a8bac7c99f249ccdf8327f6062fc8829fd47e7a856742b819",
      "0x08a8c60556323d42d83db4d1b04f6fcc9b763d507b1adb21d1186721a8fa2a41",
    ];

    publicInputs = [
      "0x1516fc71ee3e06fc2427ce8f605c17df03e07fde78602138764a42dbf8ae0cd3",
    ];
  });

  /**
   * @notice Tests that the contract deploys successfully with a valid address
   * @dev Checks that the contract address is a valid Ethereum address
   */
  it("Should deploy successfully", async function () {
    const address = await verifier.getAddress();
    expect(ethers.isAddress(address)).to.be.true;
  });

  /**
   * @notice Tests that the verifier accepts a valid proof
   * @dev Uses the proof generated by snarkjs to verify the circuit's constraints
   */
  it("Should verify a valid proof", async function () {
    const result = await verifier.verifyProof(a, b, c, publicInputs);
    expect(result).to.be.true;
  });

  /**
   * @notice Tests that the verifier rejects an invalid proof
   * @dev Modifies the public input to make the proof invalid
   */
  it("Should reject an invalid proof", async function () {
    const invalidPublicInputs = [
      "0x1516fc71ee3e06fc2427ce8f605c17df03e07fde78602138764a42dbf8ae0cd4",
    ];

    const result = await verifier.verifyProof(a, b, c, invalidPublicInputs);
    expect(result).to.be.false;
  });
});
